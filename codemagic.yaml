workflows:
  expo-multi-platform-build:
    name: Expo Multi-Platform Build
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      vars:
        BUNDLE_ID: "com.anonymous.simpleiostodo"
        BUILD_NUMBER: "1"
        ANDROID_PROJECT_DIR: "android"
        ANDROID_BUILD_TYPE: "Debug"
        XCODE_WORKSPACE: "ios/simpleiostodo.xcworkspace"
        XCODE_SCHEME: "simpleiostodo"
      node: 20
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - ~/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - android/.gradle
        - $HOME/.gradle/caches

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- Node version ---"
          node -v
          echo "--- Yarn version ---"
          yarn -v
          echo "--- npm version ---"
          npm -v
          echo "--- Xcode version ---"
          xcodebuild -version
          echo "--- CocoaPods version ---"
          pod --version
          echo "--- Java version ---"
          java -version

      - name: Install Dependencies
        script: |
          echo "--- Cleaning npm cache ---"
          npm cache clean --force
          echo "--- Installing Yarn dependencies ---"
          yarn install --network-timeout 600000 --ignore-engines

      - name: Setup EAS CLI
        script: |
          echo "--- Installing EAS CLI ---"
          npm install -g eas-cli@latest --no-audit --fund=false --omit=optional
          echo "--- EAS CLI version ---"
          npx eas-cli --version

      - name: Expo Prebuild
        script: |
          echo "--- Generating Native Code ---"
          npx expo prebuild --platform all --non-interactive --clean
          echo "--- Prebuild contents verification ---"
          ls -la ios/
          echo "--- Checking if Podfile exists ---"
          if [ -f "ios/Podfile" ]; then
            echo "✅ Podfile found"
            cat ios/Podfile
          else
            echo "❌ Podfile not found"
          fi

      - name: Install CocoaPods (iOS)
        script: |
          echo "--- Cleaning previous installations ---"
          rm -rf ios/Pods ios/Podfile.lock ios/simpleiostodo.xcworkspace
          rm -rf ~/Library/Caches/CocoaPods
          
          echo "--- Updating CocoaPods specs repo ---"
          pod repo update
          
          echo "--- Installing Pods ---"
          cd ios
          
          # Ensure Podfile exists
          if [ ! -f "Podfile" ]; then
            echo "❌ Podfile not found! Running expo prebuild first..."
            cd ..
            npx expo prebuild --platform ios --clean
            cd ios
          fi
          
          # Install pods with verbose output
          pod install --repo-update --verbose --clean-install
          
          echo "--- Verifying installation ---"
          if [ -d "Pods" ] && [ -f "Pods/Target Support Files/Pods-simpleiostodo/Pods-simpleiostodo.debug.xcconfig" ]; then
            echo "✅ Pods and config files installed successfully"
            ls -la "Pods/Target Support Files/Pods-simpleiostodo/"
          else
            echo "❌ Pods installation incomplete"
            echo "Contents of ios directory:"
            ls -la
            if [ -d "Pods" ]; then
              echo "Pods directory contents:"
              find Pods -name "*.xcconfig" | head -10
            fi
            exit 1
          fi
          
          echo "--- Checking workspace creation ---"
          if [ -d "simpleiostodo.xcworkspace" ]; then
            echo "✅ Workspace created successfully"
          else
            echo "❌ Workspace not created"
            exit 1
          fi
          
          cd ..

      - name: Prepare iOS Build
        script: |
          echo "--- Preparing iOS Build ---"
          cd ios
          
          # Clean previous builds
          if [ -d "simpleiostodo.xcworkspace" ]; then
            xcodebuild clean -workspace simpleiostodo.xcworkspace -scheme simpleiostodo
          elif [ -d "simpleiostodo.xcodeproj" ]; then
            xcodebuild clean -project simpleiostodo.xcodeproj -scheme simpleiostodo
          fi
          
          cd ..
          rm -rf ios/build

      - name: Build iOS Debug Version
        script: |
          echo "--- Building iOS Debug Version ---"
          mkdir -p build_logs/ios
          
          # Determine build target
          if [ -d "$XCODE_WORKSPACE" ]; then
            echo "Using workspace: $XCODE_WORKSPACE"
            BUILD_TARGET="-workspace $XCODE_WORKSPACE"
          elif [ -d "ios/simpleiostodo.xcodeproj" ]; then
            echo "Using project: ios/simpleiostodo.xcodeproj"
            BUILD_TARGET="-project ios/simpleiostodo.xcodeproj"
          else
            echo "Error: No valid workspace or project found"
            ls -la ios/
            exit 1
          fi
          
          # Run the build with modern build system
          set -o pipefail && xcodebuild \
            $BUILD_TARGET \
            -scheme "$XCODE_SCHEME" \
            -configuration Debug \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            ONLY_ACTIVE_ARCH=NO \
            | tee build_logs/ios/xcodebuild.log
          
          BUILD_RESULT=$?
          
          # Save build artifacts
          if ls /var/folders/*/T/ResultBundle_* 1> /dev/null 2>&1; then
            mv /var/folders/*/T/ResultBundle_* build_logs/ios/ || true
          fi
          
          # Print last 100 lines of log if build failed
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "--- Last 100 lines of build log ---"
            tail -n 100 build_logs/ios/xcodebuild.log
            echo "--- Build failed with error code $BUILD_RESULT ---"
            
            # Additional debugging
            echo "--- Checking Pods configuration ---"
            if [ -d "ios/Pods" ]; then
              find ios/Pods -name "*.xcconfig" | head -5
            fi
          fi
          
          exit $BUILD_RESULT

      - name: Build Android Debug Version
        script: |
          echo "--- Building Android Debug Version ---"
          cd android
          
          # Make gradlew executable
          chmod +x ./gradlew
          
          # Clean and build
          ./gradlew clean
          ./gradlew assembleDebug --stacktrace --info
          
          cd ..
          echo "--- APK location ---"
          find android -name "*.apk" -exec ls -la {} \;

    artifacts:
      - build_logs/**/*
      - ios/build/**/*.log
      - ios/build/**/*.xcactivitylog
      - ios/Podfile.lock
      - ios/Pods/Manifest.lock
      - android/app/build/outputs/**/*.apk

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
      slack:
        channel: "#build-notifications"