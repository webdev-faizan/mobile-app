workflows:
  expo-multi-platform-build:
    name: Expo Multi-Platform Build
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      vars:
        BUNDLE_ID: "com.anonymous.simpleiostodo"
        BUILD_NUMBER: "1"
        ANDROID_PROJECT_DIR: "android"
        ANDROID_BUILD_TYPE: "Debug"
        XCODE_WORKSPACE: "ios/simpleiostodo.xcworkspace"
        XCODE_SCHEME: "simpleiostodo"
      node: 20
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - ~/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - android/.gradle
        - $HOME/.gradle/caches

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- Node version ---"
          node -v
          echo "--- Yarn version ---"
          yarn -v
          echo "--- npm version ---"
          npm -v
          echo "--- Xcode version ---"
          xcodebuild -version
          echo "--- CocoaPods version ---"
          pod --version
          echo "--- Java version ---"
          java -version

      - name: Install Dependencies
        script: |
          echo "--- Cleaning npm cache ---"
          npm cache clean --force
          echo "--- Installing Yarn dependencies ---"
          yarn install --network-timeout 600000 --ignore-engines

      - name: Setup EAS CLI
        script: |
          echo "--- Installing EAS CLI ---"
          npm install -g eas-cli@latest --no-audit --fund=false --omit=optional
          echo "--- EAS CLI version ---"
          npx eas-cli --version

      - name: Expo Prebuild
        script: |
          echo "--- Generating Native Code ---"
          npx expo prebuild --platform all --non-interactive --clean
          echo "--- Prebuild contents verification ---"
          ls -la ios/

      - name: Install CocoaPods (iOS)
        script: |
          echo "--- Installing Pods ---"
          cd ios
          
          # Clean any existing installation
          rm -rf Pods Podfile.lock
          
          # Install pods
          pod install --repo-update --verbose
          cd ..
          
          echo "--- Pods directory contents ---"
          ls -la ios/Pods/
          
          echo "--- iOS directory after pod install ---"
          ls -la ios/
          
          # Verify workspace was created
          if [ -d "ios/simpleiostodo.xcworkspace" ]; then
            echo "✅ Workspace found: ios/simpleiostodo.xcworkspace"
          else
            echo "❌ Workspace not found, checking for xcodeproj"
            if [ -d "ios/simpleiostodo.xcodeproj" ]; then
              echo "Found xcodeproj, will use that instead"
              echo "XCODE_PROJECT=ios/simpleiostodo.xcodeproj" >> $CM_ENV
              echo "USE_PROJECT=true" >> $CM_ENV
            else
              echo "No valid Xcode project found!"
              exit 1
            fi
          fi

      - name: Build iOS Debug Version
        script: |
          echo "--- Building iOS Debug Version ---"
          
          # Verify what we're working with
          echo "iOS directory contents:"
          ls -la ios/
          
          # Create build logs directory
          mkdir -p build_logs/ios
          
          # Determine build target
          if [ "$USE_PROJECT" = "true" ] && [ -d "$XCODE_PROJECT" ]; then
            echo "Using Xcode project: $XCODE_PROJECT"
            BUILD_TARGET="-project $XCODE_PROJECT"
          elif [ -d "$XCODE_WORKSPACE" ]; then
            echo "Using workspace: $XCODE_WORKSPACE"
            BUILD_TARGET="-workspace $XCODE_WORKSPACE"
          else
            echo "Error: No valid workspace or project found"
            echo "Workspace path: $XCODE_WORKSPACE"
            echo "Project path: $XCODE_PROJECT"
            exit 1
          fi
          
          # Run the build
          set -o pipefail && xcodebuild \
            $BUILD_TARGET \
            -scheme "$XCODE_SCHEME" \
            -configuration Debug \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            | tee build_logs/ios/xcodebuild.log | xcpretty
          
          # Capture build result
          BUILD_RESULT=$?
          
          # Save result bundle if it exists
          if ls /var/folders/*/T/ResultBundle_* 1> /dev/null 2>&1; then
            mv /var/folders/*/T/ResultBundle_* build_logs/ios/ || true
          fi
          
          exit $BUILD_RESULT

      - name: Build Android Debug Version
        script: |
          echo "--- Building Android Debug Version ---"
          cd android
          ./gradlew assembleDebug --stacktrace
          cd ..
          echo "--- APK location ---"
          find android -name "*.apk" -exec ls -la {} \;

    artifacts:
      - build_logs/**/*
      - ios/build/**/*.log
      - android/app/build/outputs/**/*.apk
      - ios
      - android

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
      slack:
        channel: "#build-notifications"