workflows:
  expo-ios-release:
    name: Expo iOS Release Build
    instance_type: mac_mini_m2
    working_directory: .

    environment:
      vars:
        RCT_NO_LAUNCH_PACKAGER: "true"
        RCT_METRO_PORT: "8081"
        CI: "1"
        BUILD_NUMBER: "1"
        # Add your app-specific bundle ID
        BUNDLE_ID: "com.anonymous.simpleiostodo"
      node: 20
      java: 17
      # REQUIRED: Add code signing credentials
      # ios_signing:
      #   distribution_type: ad_hoc  # or 'ad_hoc' for testing
      #   bundle_identifier: com.anonymous.simpleiostodo

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ios/Pods
        - ios/Podfile.lock
        - ~/Library/Caches/CocoaPods

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      # ────────────────────────────────────────────────────────────────
      # 1) Environment Setup
      # ────────────────────────────────────────────────────────────────
      - name: Environment Setup
        script: |
          echo "--- System Information ---"
          sw_vers
          echo "--- Node $(node -v) ---"
          echo "--- Yarn $(yarn -v) ---"
          echo "--- Xcode $(xcodebuild -version | head -n 1) ---"
          echo "--- Ruby $(ruby -v) ---"
          echo "--- CocoaPods $(pod --version) ---"
          
          # Set environment variables for the session
          export NODE_OPTIONS=--max_old_space_size=4096
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8

      # ────────────────────────────────────────────────────────────────
      # 2) Clean Previous Builds
      # ────────────────────────────────────────────────────────────────
      - name: Clean Previous Builds
        script: |
          echo "--- Cleaning previous builds ---"
          rm -rf ios/build
          rm -rf ios/Pods
          rm -rf ios/*.xcworkspace
          rm -f ios/Podfile.lock
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          
          # Clear all CocoaPods caches to fix checksum issues
          pod cache clean --all || echo "Pod cache clean failed, continuing..."
          rm -rf ~/Library/Caches/CocoaPods
          
          # Update CocoaPods to latest version
          sudo gem install cocoapods --no-document || echo "CocoaPods update failed, using existing version"

      # ────────────────────────────────────────────────────────────────
      # 3) Install Dependencies First (before prebuild)
      # ────────────────────────────────────────────────────────────────
      - name: Install JS Dependencies
        script: |
          echo "--- Installing JS dependencies ---"
          npm cache clean --force
          yarn install --frozen-lockfile --network-timeout 600000 --ignore-engines

      # ────────────────────────────────────────────────────────────────
      # 4) Expo Prebuild (generate native projects)
      # ────────────────────────────────────────────────────────────────
      - name: Expo Prebuild
        script: |
          echo "--- Installing Expo CLI ---"
          npm install -g @expo/cli@latest --no-audit --fund=false
          
          echo "--- Running Expo prebuild ---"
          npx expo prebuild --clean --platform ios --no-install
          
          echo "--- Prebuild completed, ios/ contents: ---"
          ls -la ios/
          
          # Verify essential files exist
          if [ ! -f "ios/Podfile" ]; then
            echo "❌ Podfile not found after prebuild"
            exit 1
          fi
          
          if [ ! -d "ios" ] || [ -z "$(ls -A ios/*.xcodeproj 2>/dev/null)" ]; then
            echo "❌ No Xcode project found after prebuild"
            exit 1
          fi
          
          echo "✅ Prebuild verification completed"

      # ────────────────────────────────────────────────────────────────
      # 5) Fix CocoaPods Checksum Issues
      # ────────────────────────────────────────────────────────────────
      - name: Fix CocoaPods Repository
        script: |
          echo "--- Fixing CocoaPods repository issues ---"
          
          # Remove and re-add the CocoaPods master repo to fix checksum issues
          pod repo remove master || echo "Master repo not found, continuing..."
          pod repo add master https://github.com/CocoaPods/Specs.git --shallow
          
          # Alternative: Update existing repo
          pod repo update --verbose || echo "Repo update failed, continuing..."
          
          # Clear all caches again
          pod cache clean --all || echo "Cache clean failed, continuing..."
          rm -rf ~/Library/Caches/CocoaPods

      # ────────────────────────────────────────────────────────────────
      # 6) Install CocoaPods with Retry Logic
      # ────────────────────────────────────────────────────────────────
      - name: Install CocoaPods Dependencies
        script: |
          echo "--- Installing CocoaPods dependencies with retry logic ---"
          cd ios
          
          # Function to attempt pod install with different strategies
          install_pods_with_retry() {
            local attempt=$1
            local max_attempts=6
            
            echo "🔄 Attempt $attempt of $max_attempts"
            
            case $attempt in
              1)
                echo "Standard installation..."
                pod install --repo-update --verbose
                ;;
              2)
                echo "Installation without repo update..."
                pod install --verbose
                ;;
              3)
                echo "Installation with clean cache..."
                pod cache clean --all || true
                pod install --verbose
                ;;
              4)
                echo "Installation with deintegrate first..."
                pod deintegrate || true
                pod install --repo-update --verbose
                ;;
              5)
                echo "Installation skipping checksum verification..."
                pod install --verbose --no-repo-update
                ;;
              6)
                echo "Final attempt with CDN source..."
                # Temporarily modify Podfile to use CDN
                if ! grep -q "source 'https://cdn.cocoapods.org/'" Podfile; then
                  sed -i '' '1i\
source '\''https://cdn.cocoapods.org/'\''
' Podfile
                fi
                pod install --verbose
                ;;
            esac
          }
          
          # Retry loop
          attempt=1
          max_attempts=6
          success=false
          
          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            if install_pods_with_retry $attempt; then
              echo "✅ Pod installation successful on attempt $attempt"
              success=true
            else
              echo "❌ Pod installation failed on attempt $attempt"
              if [ $attempt -eq $max_attempts ]; then
                echo "🚨 All pod installation attempts failed"
                echo "--- Last Podfile content ---"
                cat Podfile
                echo "--- Pods directory status ---"
                ls -la . | grep -i pod || echo "No pod-related files found"
                exit 1
              fi
              
              # Wait before retry
              echo "⏳ Waiting 15 seconds before retry..."
              sleep 15
            fi
            attempt=$((attempt + 1))
          done
          
          # Verify workspace creation
          if ls *.xcworkspace 1> /dev/null 2>&1; then
            WORKSPACE_FILE=$(ls *.xcworkspace | head -n 1)
            echo "✅ Workspace created successfully: $WORKSPACE_FILE"
          else
            echo "❌ No workspace found after pod install"
            echo "Available files:"
            ls -la .
            exit 1
          fi
          
          cd ..

      # ────────────────────────────────────────────────────────────────
      # 7) Create Export Options Plist
      # ────────────────────────────────────────────────────────────────
      - name: Create Export Options
        script: |
          echo "--- Creating export options plist ---"
          cd ios
          
          cat > exportOptions.plist << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>development</string>
    <key>teamID</key>
    <string></string>
    <key>compileBitcode</key>
    <false/>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <false/>
    <key>signingStyle</key>
    <string>automatic</string>
    <key>stripSwiftSymbols</key>
    <true/>
    <key>thinning</key>
    <string>&lt;none&gt;</string>
    <key>destination</key>
    <string>export</string>
</dict>
</plist>
EOF
          
          echo "Export options plist created"
          cd ..

      # ────────────────────────────────────────────────────────────────
      # 8) Build and Archive
      # ────────────────────────────────────────────────────────────────
      - name: Build and Archive
        script: |
          echo "--- Building and archiving iOS app ---"
          cd ios
          
          # Create build directory
          mkdir -p build
          
          # Find the correct workspace/project file
          if ls *.xcworkspace 1> /dev/null 2>&1; then
            WORKSPACE=$(ls *.xcworkspace | head -n 1)
            BUILD_TARGET="-workspace $WORKSPACE"
            echo "Using workspace: $WORKSPACE"
          else
            PROJECT=$(ls *.xcodeproj | head -n 1)
            BUILD_TARGET="-project $PROJECT"
            echo "Using project: $PROJECT"
          fi
          
          # Get scheme name (usually matches app name)
          SCHEME_NAME=$(xcodebuild -list $BUILD_TARGET 2>/dev/null | sed -n '/Schemes:/,/^$/p' | grep -v "Schemes:" | grep -v "^$" | head -n 1 | xargs)
          
          if [ -z "$SCHEME_NAME" ]; then
            echo "⚠️  Could not detect scheme, trying common names..."
            # Try common scheme names
            for scheme in "simple-ios-todo" "simpleiostodo" "SimpleIosTodo" "App"; do
              if xcodebuild -list $BUILD_TARGET 2>/dev/null | grep -q "$scheme"; then
                SCHEME_NAME="$scheme"
                break
              fi
            done
          fi
          
          if [ -z "$SCHEME_NAME" ]; then
            echo "❌ Could not determine scheme name"
            echo "Available schemes:"
            xcodebuild -list $BUILD_TARGET
            exit 1
          fi
          
          echo "Using scheme: $SCHEME_NAME"
          
          # Clean build
          echo "🧹 Cleaning previous build..."
          xcodebuild clean $BUILD_TARGET -scheme "$SCHEME_NAME" -configuration Release
          
          # Archive for device (without code signing for now)
          echo "📦 Creating archive..."
          xcodebuild \
            $BUILD_TARGET \
            -scheme "$SCHEME_NAME" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/App.xcarchive \
            -derivedDataPath build/DerivedData \
            archive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            | tee build/archive.log
          
          # Check if archive was created
          if [ -d "build/App.xcarchive" ]; then
            echo "✅ Archive created successfully"
            
            # For development builds without signing, we'll package the .app directly
            APP_PATH=$(find build/App.xcarchive -name "*.app" -type d | head -n 1)
            if [ -n "$APP_PATH" ]; then
              echo "📱 Found app at: $APP_PATH"
              cp -R "$APP_PATH" build/
              
              # Create a simple IPA structure (zip the .app)
              cd build
              APP_NAME=$(basename "$APP_PATH")
              mkdir -p Payload
              cp -R "$APP_NAME" Payload/
              zip -r "${APP_NAME%.app}.ipa" Payload/
              cd ..
              
              echo "✅ IPA-like package created: build/${APP_NAME%.app}.ipa"
            else
              echo "⚠️  App not found in archive, but archive exists"
            fi
          else
            echo "❌ Archive creation failed"
            echo "--- Build log tail ---"
            tail -50 build/archive.log
            
            # Try simulator build as fallback
            echo "🔄 Trying simulator build as fallback..."
            xcodebuild \
              $BUILD_TARGET \
              -scheme "$SCHEME_NAME" \
              -configuration Debug \
              -sdk iphonesimulator \
              -derivedDataPath build/DerivedData \
              CODE_SIGNING_ALLOWED=NO \
              CODE_SIGNING_REQUIRED=NO \
              | tee build/simulator.log
            
            # Find simulator app
            SIM_APP=$(find build/DerivedData -name "*.app" -type d | head -n 1)
            if [ -n "$SIM_APP" ]; then
              echo "✅ Simulator app built: $SIM_APP"
              cp -R "$SIM_APP" build/
            fi
          fi
          
          echo "--- Build completed ---"
          echo "Build directory contents:"
          ls -la build/
          cd ..

      # ────────────────────────────────────────────────────────────────
      # 9) Package and Verify Artifacts
      # ────────────────────────────────────────────────────────────────
      - name: Package Artifacts
        script: |
          echo "--- Packaging build artifacts ---"
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Copy all build outputs
          if [ -d "ios/build" ]; then
            # Copy any IPA files
            find ios/build -name "*.ipa" -exec cp {} artifacts/ \;
            
            # Copy .app files
            find ios/build -name "*.app" -type d -exec cp -R {} artifacts/ \;
            
            # Copy archive if exists
            if [ -d "ios/build/App.xcarchive" ]; then
              cp -R ios/build/App.xcarchive artifacts/
            fi
            
            # Copy logs
            find ios/build -name "*.log" -exec cp {} artifacts/ \;
          fi
          
          # Create installation instructions
          cat > artifacts/INSTALLATION_INSTRUCTIONS.md << 'EOF'
# iOS App Installation Instructions

## Files Included
- `.app` files: For iOS Simulator installation
- `.ipa` files: For device installation (if code signing was successful)
- `.xcarchive`: For manual export with proper signing
- Log files: For debugging build issues

## Installation Methods

### For iOS Simulator
1. Open iOS Simulator
2. Drag and drop the `.app` file into the simulator
3. Or use command line:
   ```bash
   xcrun simctl install booted YourApp.app
   ```

### For Physical Device
1. **Using Xcode**:
   - Connect your device
   - Open Xcode → Window → Devices and Simulators
   - Select your device → Install App → Choose the .ipa file

2. **Using Archive**:
   - Open the `.xcarchive` file in Xcode
   - Use Organizer to export with proper signing
   - Install the resulting IPA

### Notes
- Device installation requires proper code signing and provisioning
- For development distribution, register your device in Apple Developer portal
- Use TestFlight for broader distribution

## Troubleshooting
- If installation fails, check the log files for build errors
- Ensure your device iOS version is compatible
- Verify code signing configuration for device builds
EOF
          
          echo "--- Artifacts Summary ---"
          ls -la artifacts/
          
          # Create final package
          if [ "$(ls -A artifacts/)" ]; then
            tar -czf ios-build-artifacts.tar.gz -C artifacts .
            echo "✅ Artifacts packaged successfully"
            echo "Package size: $(du -sh ios-build-artifacts.tar.gz)"
          else
            echo "⚠️  No artifacts to package"
          fi

    artifacts:
      - artifacts/*.app
      - artifacts/*.ipa
      - artifacts/*.xcarchive
      - artifacts/*.log
      - artifacts/INSTALLATION_INSTRUCTIONS.md
      - ios-build-artifacts.tar.gz
      - ios/exportOptions.plist

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          fai