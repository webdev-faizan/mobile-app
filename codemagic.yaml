workflows:
  expo-development-build:
    name: Expo Development Build (Android & iOS)
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      vars:
        CI: "true"
        BUILD_NUMBER: "1"
        XCODE_WORKSPACE: "ios/simple-ios-todo.xcworkspace"
        XCODE_SCHEME: "simple-ios-todo"
        BUNDLE_ID: "com.anonymous.simpleiostodo"
        NODE_VERSION: "18"  # Recommended for most Expo projects
      node: $NODE_VERSION
      java: 17
      xcode: 15.0
      cocoapods: "1.14.0"  # Specify a compatible version

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ~/Library/Caches/CocoaPods
        - ios/Pods
        - ~/.gradle/caches

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- Environment Setup ---"
          echo "Node version: $(node -v)"
          echo "Yarn version: $(yarn -v)"
          echo "npm version: $(npm -v)"
          echo "Java version: $(java -version 2>&1 | head -n 1)"
          echo "Xcode version: $(xcodebuild -version | head -n 1)"
          echo "CocoaPods version: $(pod --version)"
          echo "Android SDK location: $ANDROID_SDK_ROOT"

      - name: Install Dependencies
        script: |
          npm cache clean --force
          yarn install --network-timeout 600000 --ignore-engines
          npm install -g sharp-cli  # For image processing

      - name: Setup Expo CLI
        script: |
          npm install -g @expo/cli@latest --no-audit --fund=false --omit=optional
          npx expo --version

      - name: Android Build
        script: |
          echo "--- Building Android APK ---"
          # Clean previous builds
          rm -rf android/app/build
          
          # Generate Android native code
          npx expo prebuild --platform android --non-interactive
          
          # Build Android app
          cd android
          ./gradlew clean
          ./gradlew :app:assembleDebug --no-daemon --stacktrace
          cd ..
          
          # Verify APK was created
          if [ ! -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "Android APK not found!"
            exit 1
          fi

      - name: iOS Build
        script: |
          echo "--- Building iOS Simulator ---"
          # Clean previous builds
          rm -rf ios/build
          rm -rf ios/Pods
          
          # Generate iOS native code
          npx expo prebuild --platform ios --non-interactive --clean
          
          # Install CocoaPods dependencies
          cd ios
          gem install cocoapods -v 1.14.0
          pod repo update
          pod deintegrate
          pod install --repo-update --verbose
          cd ..
          
          # Build for iOS Simulator
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Debug \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath ios/build \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO
          
          # Package simulator build
          mkdir -p ios_simulator_build
          if [ -d "ios/build/Build/Products/Debug-iphonesimulator" ]; then
            cp -R ios/build/Build/Products/Debug-iphonesimulator/*.app ios_simulator_build/
            # Create archive for download
            cd ios_simulator_build
            tar -czf ../ios-simulator-build.tar.gz *.app
            cd ..
          else
            echo "iOS simulator build not found!"
            ls -la ios/build/Build/Products/
            exit 1
          fi

      - name: Verify Build Artifacts
        script: |
          echo "--- Build Artifacts ---"
          echo "Android APK:"
          find android/app/build/outputs -name "*.apk" -type f
          echo "iOS Simulator:"
          find ios_simulator_build -name "*.app" -type d
          find . -name "*.tar.gz" -type f

    artifacts:
      # Android artifacts
      - android/app/build/outputs/apk/debug/*.apk
      - android/app/build/**/*.log
      
      # iOS artifacts
      - ios_simulator_build/*.app
      - ios-simulator-build.tar.gz
      - ios/build/**/*.log
      
      # Build logs
      - build_logs/**

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          failure: true
      slack:
        channel: "#build-notifications"
        notify_on_build_start: true
        notify:
          success: true
          failure: true