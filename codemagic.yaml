workflows:
  expo-development-build:
    name: Expo Development Build (iOS Device & Simulator)
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      node: 20
      java: 17
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ~/Library/Caches/CocoaPods
        - ios/Pods

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- System Info ---"
          echo "Node version: $(node -v)"
          echo "Yarn version: $(yarn -v)"
          echo "npm version: $(npm -v)"
          echo "Java version: $(java -version 2>&1 | head -n 1)"
          echo "Xcode version: $(xcodebuild -version | head -n 1)"
          echo "CocoaPods version: $(pod --version)"
          echo "System architecture: $(uname -m)"
          echo "Available memory: $(sysctl -n hw.memsize | awk '{print $0/1073741824" GB"}')"
          
          export NODE_OPTIONS=--max_old_space_size=4096
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          export CI=1

      - name: Clean Workspace
        script: |
          echo "--- Cleaning previous builds ---"
          rm -rf ios/build
          rm -rf ios_simulator_build
          rm -rf ios_device_build
          rm -f ios-simulator-build.tar.gz
          rm -f ios-device-build.tar.gz
          rm -f ios-simulator-build.zip
          rm -f ios-device-build.zip
          rm -rf ios/
          find . -name "*.log" -delete
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          pod cache clean --all || echo "Pod cache clean failed, continuing..."
          rm -rf ~/Library/Caches/CocoaPods

      - name: Install Dependencies
        script: |
          echo "--- Installing dependencies ---"
          npm cache clean --force
          yarn install --network-timeout 600000 --ignore-engines --frozen-lockfile
          yarn check --verify-tree || (echo "Dependency tree verification failed" && exit 1)

      - name: Setup Expo CLI
        script: |
          echo "--- Setting up Expo CLI ---"
          npm install -g @expo/cli@latest --no-audit --fund=false --omit=optional
          npx expo --version

      - name: Prebuild iOS Project
        script: |
          echo "--- Running expo prebuild ---"
          rm -rf ios/
          npx expo prebuild --platform ios --clean
          
          echo "--- Verifying prebuild files ---"
          if [ ! -d "ios/" ]; then
            echo "Error: ios directory was not created by expo prebuild"
            ls -la .
            exit 1
          fi
          
          if [ ! -f "ios/simple-ios-todo.xcodeproj/project.pbxproj" ]; then
            echo "Error: Xcode project not found"
            ls -la ios/ || echo "ios directory exists but cannot list contents"
            find ios/ -name "*.xcodeproj" -type d 2>/dev/null || echo "No .xcodeproj files found"
            exit 1
          fi
          
          if [ ! -f "ios/Podfile" ]; then
            echo "Error: Podfile not found"
            exit 1
          fi
          
          echo "--- Prebuild verification completed successfully ---"

      - name: Update CocoaPods Repository
        script: |
          echo "--- Updating CocoaPods repository ---"
          pod repo update --verbose || echo "Pod repo update failed, continuing with existing repo"
          pod cache clean --all || echo "Pod cache clean failed, continuing..."

      - name: Install CocoaPods with Retry Logic
        script: |
          echo "--- Installing pods with retry logic ---"
          cd ios
          
          install_pods() {
            local attempt=$1
            echo "Attempt $attempt: Installing CocoaPods dependencies..."
            
            case $attempt in
              1) pod install --repo-update --verbose ;;
              2) pod cache clean --all || true
                 pod install --repo-update --verbose ;;
              3) pod install --verbose ;;
              4) if ! grep -q "platform :ios" Podfile; then
                   echo "platform :ios, '12.4'" | cat - Podfile > temp && mv temp Podfile
                 fi
                 pod install --verbose ;;
              5) pod deintegrate || true
                 pod install --repo-update --verbose ;;
            esac
          }
          
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if install_pods $attempt; then
              echo "Pod installation successful on attempt $attempt"
              break
            else
              echo "Pod installation failed on attempt $attempt"
              if [ $attempt -eq $max_attempts ]; then
                echo "All pod installation attempts failed"
                exit 1
              fi
              attempt=$((attempt + 1))
              sleep 10
            fi
          done
          
          cd ..
          
          if [ ! -d "ios/Pods" ]; then
            echo "Error: Pods directory not created"
            ls -la ios/
            exit 1
          fi
          
          if [ ! -d "ios/simple-ios-todo.xcworkspace" ] && [ ! -f "ios/simple-ios-todo.xcworkspace" ]; then
            echo "Warning: Workspace not found, checking for project file instead..."
            if [ ! -f "ios/simple-ios-todo.xcodeproj/project.pbxproj" ]; then
              echo "Error: Neither workspace nor project file found"
              ls -la ios/
              exit 1
            else
              echo "Project file found, continuing with .xcodeproj"
            fi
          fi
          
          echo "--- CocoaPods installation completed successfully ---"

      - name: Build iOS Device (IPA)
        script: |
          echo "--- Building for iOS Device (IPA) ---"
          set -o pipefail
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          
          if [ -d "ios/simple-ios-todo.xcworkspace" ] || [ -f "ios/simple-ios-todo.xcworkspace" ]; then
            BUILD_TARGET="-workspace ios/simple-ios-todo.xcworkspace"
            echo "Using workspace for build"
          else
            BUILD_TARGET="-project ios/simple-ios-todo.xcodeproj"
            echo "Using project for build"
          fi
          
          xcodebuild clean \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug

          echo "Starting device archive process..."
          xcodebuild archive \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug \
            -destination 'generic/platform=iOS' \
            -archivePath ios/build/simple-ios-todo.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            DEVELOPMENT_TEAM="" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            -quiet \
            | tee xcodebuild-device.log

          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "--- Device archive exit code: $BUILD_EXIT_CODE ---"
          
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "--- Exporting archive to IPA ---"
            
            cat > ios/ExportOptions.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
    <string>development</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>stripSwiftSymbols</key>
    <true/>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <false/>
    <key>compileBitcode</key>
    <false/>
</dict>
</plist>
EOF
            
            xcodebuild -exportArchive \
              -archivePath ios/build/simple-ios-todo.xcarchive \
              -exportPath ios/build/export \
              -exportOptionsPlist ios/ExportOptions.plist \
              | tee -a xcodebuild-device.log
              
            EXPORT_EXIT_CODE=${PIPESTATUS[0]}
            
            if [ $EXPORT_EXIT_CODE -eq 0 ]; then
              echo "--- Device build and export completed successfully ---"
            else
              echo "--- Export failed, trying alternative method ---"
              APP_PATH=$(find ios/build/simple-ios-todo.xcarchive -name "*.app" -type d -print -quit 2>/dev/null)
              if [ -d "$APP_PATH" ]; then
                echo "Creating IPA manually from app bundle..."
                mkdir -p ios/build/export/Payload
                cp -R "$APP_PATH" ios/build/export/Payload/
                cd ios/build/export
                zip -r simple-ios-todo.ipa Payload/
                cd ../../..
                echo "Manual IPA creation completed"
              else
                echo "--- Archive creation failed ---"
                tail -50 xcodebuild-device.log
              fi
            fi
          else
            echo "--- Device build failed, continuing to simulator build ---"
            grep -i "error:" xcodebuild-device.log | tail -10 || echo "No specific errors found"
          fi

      - name: Build iOS Simulator
        script: |
          echo "--- Building for iOS Simulator ---"
          set -o pipefail
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          
          if [ -d "ios/simple-ios-todo.xcworkspace" ] || [ -f "ios/simple-ios-todo.xcworkspace" ]; then
            BUILD_TARGET="-workspace ios/simple-ios-todo.xcworkspace"
            echo "Using workspace for build"
          else
            BUILD_TARGET="-project ios/simple-ios-todo.xcodeproj"
            echo "Using project for build"
          fi
          
          xcodebuild clean \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug

          echo "Starting simulator build process..."
          xcodebuild \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=17.0' \
            -derivedDataPath ios/build/simulator \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            ONLY_ACTIVE_ARCH=YES \
            -quiet \
            | tee xcodebuild-simulator.log

          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "--- Simulator build exit code: $BUILD_EXIT_CODE ---"
          
          if [ $BUILD_EXIT_CODE -eq 0 ] && grep -q "BUILD SUCCEEDED" xcodebuild-simulator.log; then
            echo "--- Simulator build completed successfully ---"
          else
            echo "--- Simulator build failed ---"
            grep -i "error:" xcodebuild-simulator.log | tail -10 || echo "No specific errors found"
            grep -i "warning:" xcodebuild-simulator.log | tail -5 || echo "No warnings found"
            tail -50 xcodebuild-simulator.log
            exit 1
          fi

      - name: Package Device Artifacts
        script: |
          echo "--- Packaging device build artifacts ---"
          mkdir -p ios_device_build
          
          IPA_PATH=$(find ios/build/export -name "*.ipa" -type f -print -quit 2>/dev/null)
          
          if [ -f "$IPA_PATH" ]; then
            echo "Found IPA at: $IPA_PATH"
            cp "$IPA_PATH" ios_device_build/
            
            APP_PATH=$(find ios/build/simple-ios-todo.xcarchive -name "*.app" -type d -print -quit 2>/dev/null)
            if [ -d "$APP_PATH" ]; then
              echo "Found device app bundle at: $APP_PATH"
              cp -R "$APP_PATH" ios_device_build/simple-ios-todo-device.app
            fi
            
            cat > ios_device_build/README.txt << EOF
iOS Device Build - Installation Instructions
==========================================

Files included:
- simple-ios-todo.ipa (for installation on physical devices)
- simple-ios-todo-device.app (app bundle from archive)

Installation Options:

1. Using Xcode (Recommended):
   - Connect your iOS device to your Mac
   - Open Xcode and go to Window > Devices and Simulators
   - Select your device and drag the .ipa file to the "Installed Apps" section

2. Using iOS App Installer (if available):
   - Transfer the .ipa file to your iOS device
   - Tap the file to install (requires developer profile)

3. Using 3rd party tools:
   - Use tools like AltStore, Sideloadly, or similar
   - Follow their specific installation instructions

Note: This is a development build and may require a developer certificate
to install on physical devices.
EOF
            
            tar -czf ios-device-build.tar.gz -C ios_device_build .
            cd ios_device_build && zip -r ../ios-device-build.zip . && cd ..
            
            echo "--- Device artifact sizes ---"
            du -sh ios_device_build/*
            du -sh ios-device-build.tar.gz
            du -sh ios-device-build.zip
            
            echo "--- Device packaging completed successfully ---"
          else
            echo "Warning: .ipa file not found, device build may have failed"
            find ios/build -name "*.ipa" -o -name "*.app" 2>/dev/null || echo "No device app files found"
            touch ios_device_build/.empty
            tar -czf ios-device-build.tar.gz -C ios_device_build .
          fi

      - name: Package Simulator Artifacts
        script: |
          echo "--- Packaging simulator build artifacts ---"
          mkdir -p ios_simulator_build
          
          APP_PATH=$(find ios/build/simulator -name "*.app" -type d -print -quit 2>/dev/null)
          
          if [ -z "$APP_PATH" ]; then
            echo "Searching in alternative locations..."
            APP_PATH=$(find ios/build/simulator/Build/Products -name "*.app" -type d -print -quit 2>/dev/null)
          fi
          
          if [ -d "$APP_PATH" ]; then
            echo "Found simulator app bundle at: $APP_PATH"
            cp -R "$APP_PATH" ios_simulator_build/
            
            cat > ios_simulator_build/README.txt << EOF
iOS Simulator Build - Installation Instructions
==============================================

This is a simulator build (.app) that can only be installed on iOS Simulator.

Installation Steps:
1. Open iOS Simulator (Xcode > Open Developer Tool > Simulator)
2. Boot your preferred iOS simulator device
3. Drag and drop the .app file onto the simulator screen
4. The app should install and appear on the home screen

Alternative Installation Method:
1. Open iOS Simulator
2. Go to Device > Install App... in the simulator menu
3. Select the .app file from this package

Note: This build will NOT work on physical iOS devices.
For device installation, use the device build package instead.

Simulator Requirements:
- Xcode with iOS Simulator installed
- macOS system
- iOS 12.4 or later simulator
EOF
            
            tar -czf ios-simulator-build.tar.gz -C ios_simulator_build .
            cd ios_simulator_build && zip -r ../ios-simulator-build.zip . && cd ..
            
            echo "--- Simulator artifact sizes ---"
            du -sh ios_simulator_build/*.app
            du -sh ios-simulator-build.tar.gz
            du -sh ios-simulator-build.zip
            
            echo "--- Simulator packaging completed successfully ---"
          else
            echo "Error: Simulator .app bundle not found"
            find ios/build/simulator -type f -name "*.app" -o -name "*.ipa" -o -name "*simple-ios-todo*" 2>/dev/null || echo "No simulator app files found"
            find ios/build/simulator -type d -name "*simple*" -o -name "*ios*" -o -name "*Debug*" 2>/dev/null || echo "No relevant directories found"
            exit 1
          fi

      - name: Verify Build Outputs
        script: |
          echo "--- Build verification ---"
          echo "=== Device Build ==="
          if [ -f "ios-device-build.tar.gz" ]; then
            echo "✓ Device tar archive found"
            tar -ztvf ios-device-build.tar.gz | head -10
          else
            echo "✗ Device tar archive not found"
          fi
          
          if [ -f "ios-device-build.zip" ]; then
            echo "✓ Device zip archive found"
          else
            echo "✗ Device zip archive not found"
          fi
          
          echo ""
          echo "=== Simulator Build ==="
          if [ -f "ios-simulator-build.tar.gz" ]; then
            echo "✓ Simulator tar archive found"
            tar -ztvf ios-simulator-build.tar.gz | head -10
            
            if tar -ztvf ios-simulator-build.tar.gz | grep -q "\.app/"; then
              echo "✓ App bundle found in simulator archive"
            else
              echo "✗ App bundle not found in simulator archive"
              exit 1
            fi
          else
            echo "✗ Simulator tar archive not found"
            exit 1
          fi
          
          if [ -f "ios-simulator-build.zip" ]; then
            echo "✓ Simulator zip archive found"
          else
            echo "✗ Simulator zip archive not found"
          fi
          
          echo ""
          echo "=== Summary ==="
          echo "Available downloads:"
          ls -la *.tar.gz *.zip 2>/dev/null || echo "No archives found"
          
          echo "--- Build verification completed ---"

    artifacts:
      - ios_device_build/*.ipa
      - ios_device_build/*.app
      - ios-device-build.tar.gz
      - ios-device-build.zip
      - ios_simulator_build/*.app
      - ios-simulator-build.tar.gz
      - ios-simulator-build.zip
      - ios/build/**/*.log
      - xcodebuild-device.log
      - xcodebuild-simulator.log
      - ios/Podfile.lock
      - ios_device_build/README.txt
      - ios_simulator_build/README.txt

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          failure: true