workflows:
  expo-development-build:
    name: Expo Development Build (iOS only)
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      node: 20
      java: 17
      xcode: 15.0
      cocoapods: 1.16.1  # Specify exact version
      vars:
        IOS_DEPLOYMENT_TARGET: "13.0"  # Set minimum iOS version

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ~/Library/Caches/CocoaPods
        - ios/Pods

    scripts:
      - name: Setup Environment
        script: |
          echo "--- System Info ---"
          node -v
          yarn -v
          npm -v
          java -version 2>&1 | head -n 1
          xcodebuild -version | head -n 1
          pod --version
          
          # Update CocoaPods to specific version
          sudo gem install cocoapods -v 1.16.1
          pod --version

      - name: Install Dependencies
        script: |
          echo "--- Installing dependencies ---"
          npm cache clean --force
          # Temporarily disable postinstall script
          if [ -f package.json ]; then
            jq 'del(.scripts.postinstall)' package.json > package.tmp.json && mv package.tmp.json package.json
          fi
          yarn install --network-timeout 600000 --ignore-engines --frozen-lockfile

      - name: Prebuild iOS Project
        script: |
          echo "--- Running expo prebuild ---"
          npx expo prebuild --platform ios --non-interactive
          
          # Update Podfile with correct deployment target
          if [ -f "ios/Podfile" ]; then
            echo "Updating Podfile with deployment target $IOS_DEPLOYMENT_TARGET"
            sed -i '' "s/platform :ios, .*/platform :ios, '$IOS_DEPLOYMENT_TARGET'/" ios/Podfile
            # Add post_install hook if not exists
            if ! grep -q "post_install" ios/Podfile; then
              echo "Adding post_install hook to Podfile"
              echo "
              post_install do |installer|
                installer.pods_project.targets.each do |target|
                  target.build_configurations.each do |config|
                    config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '$IOS_DEPLOYMENT_TARGET'
                  end
                end
              end
              " >> ios/Podfile
            fi
          fi

      - name: Install CocoaPods
        script: |
          echo "--- Installing pods ---"
          if [ -d "ios" ]; then
            cd ios
            # Clean pod cache and update repos
            pod cache clean --all
            pod repo update
            # Install with verbose output
            pod install --repo-update --verbose || {
              echo "First attempt failed, retrying..."
              pod install --repo-update --verbose
            }
            cd ..
          else
            echo "Error: ios directory not found"
            exit 1
          fi

      - name: Build iOS Simulator
        script: |
          echo "--- Building for iOS Simulator ---"
          set -o pipefail
          xcodebuild clean
          
          xcodebuild \
            -workspace "ios/simple-ios-todo.xcworkspace" \
            -scheme "simple-ios-todo" \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=17.0' \
            -derivedDataPath ios/build \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            | tee xcodebuild.log

          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "Build succeeded"
          else
            echo "Build failed"
            exit 1
          fi

    artifacts:
      - ios/build/**/*.log
      - xcodebuild.log

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com