workflows:
  expo-development-build:
    name: Expo Development Build (iOS Device & Simulator)
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      node: 20
      java: 17
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ~/Library/Caches/CocoaPods
        - ios/Pods

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- System Info ---"
          echo "Node version: $(node -v)"
          echo "Yarn version: $(yarn -v)"
          echo "npm version: $(npm -v)"
          echo "Java version: $(java -version 2>&1 | head -n 1)"
          echo "Xcode version: $(xcodebuild -version | head -n 1)"
          echo "CocoaPods version: $(pod --version)"
          echo "System architecture: $(uname -m)"
          echo "Available memory: $(sysctl -n hw.memsize | awk '{print $0/1073741824" GB"}')"
          
          # Set environment variables
          export NODE_OPTIONS=--max_old_space_size=4096
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          export CI=1

      - name: Clean Workspace
        script: |
          echo "--- Cleaning previous builds ---"
          rm -rf ios/build
          rm -rf ios_simulator_build
          rm -rf ios_device_build
          rm -f ios-simulator-build.tar.gz
          rm -f ios-device-build.tar.gz
          rm -f ios-simulator-build.zip
          rm -f ios-device-build.zip
          rm -rf ios/
          find . -name "*.log" -delete
          # Clear derived data
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          # Clear CocoaPods cache to fix checksum issues
          pod cache clean --all || echo "Pod cache clean failed, continuing..."
          rm -rf ~/Library/Caches/CocoaPods

      - name: Install Dependencies
        script: |
          echo "--- Installing dependencies ---"
          npm cache clean --force
          yarn install --network-timeout 600000 --ignore-engines --frozen-lockfile
          yarn check --verify-tree || (echo "Dependency tree verification failed" && exit 1)

      - name: Setup Expo CLI
        script: |
          echo "--- Setting up Expo CLI ---"
          npm install -g @expo/cli@latest --no-audit --fund=false --omit=optional
          npx expo --version

      - name: Prebuild iOS Project
        script: |
          echo "--- Running expo prebuild ---"
          # Remove the ios directory first to ensure clean prebuild
          rm -rf ios/
          
          # Use correct expo prebuild syntax
          npx expo prebuild --platform ios --clean
          
          echo "--- Verifying prebuild files ---"
          # Check if ios directory was created
          if [ ! -d "ios/" ]; then
            echo "Error: ios directory was not created by expo prebuild"
            echo "Available directories:"
            ls -la .
            exit 1
          fi
          
          # Check for the Xcode project file (created by expo prebuild)
          if [ ! -f "ios/simple-ios-todo.xcodeproj/project.pbxproj" ]; then
            echo "Error: Xcode project not found at ios/simple-ios-todo.xcodeproj/project.pbxproj"
            echo "Available files in ios directory:"
            ls -la ios/ || echo "ios directory exists but cannot list contents"
            echo "Looking for any .xcodeproj files:"
            find ios/ -name "*.xcodeproj" -type d 2>/dev/null || echo "No .xcodeproj files found"
            exit 1
          fi
          
          if [ ! -f "ios/Podfile" ]; then
            echo "Error: Podfile not found"
            exit 1
          fi
          
          echo "--- Prebuild verification completed successfully ---"

      - name: Update CocoaPods Repository
        script: |
          echo "--- Updating CocoaPods repository ---"
          # Update CocoaPods repo to get latest podspecs
          pod repo update --verbose || echo "Pod repo update failed, continuing with existing repo"
          
          # Clear any existing cache
          pod cache clean --all || echo "Pod cache clean failed, continuing..."

      - name: Install CocoaPods with Retry Logic
        script: |
          echo "--- Installing pods with retry logic ---"
          cd ios
          
          # Function to attempt pod install
          install_pods() {
            local attempt=$1
            echo "Attempt $attempt: Installing CocoaPods dependencies..."
            
            # Try different approaches based on attempt number
            case $attempt in
              1)
                echo "Standard installation attempt..."
                pod install --repo-update --verbose
                ;;
              2)
                echo "Attempting with clean cache..."
                pod cache clean --all || true
                pod install --repo-update --verbose
                ;;
              3)
                echo "Attempting without repo update..."
                pod install --verbose
                ;;
              4)
                echo "Attempting with deployment target fix..."
                # Add deployment target to Podfile if not present
                if ! grep -q "platform :ios" Podfile; then
                  echo "platform :ios, '12.4'" | cat - Podfile > temp && mv temp Podfile
                fi
                pod install --verbose
                ;;
              5)
                echo "Final attempt with deintegration and reinstall..."
                pod deintegrate || true
                pod install --repo-update --verbose
                ;;
            esac
          }
          
          # Retry logic
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if install_pods $attempt; then
              echo "Pod installation successful on attempt $attempt"
              break
            else
              echo "Pod installation failed on attempt $attempt"
              if [ $attempt -eq $max_attempts ]; then
                echo "All pod installation attempts failed"
                exit 1
              fi
              attempt=$((attempt + 1))
              sleep 10
            fi
          done
          
          cd ..
          
          # Verify that both the workspace and Pods directory were created
          if [ ! -d "ios/Pods" ]; then
            echo "Error: Pods directory not created"
            echo "Contents of ios directory:"
            ls -la ios/
            exit 1
          fi
          
          # Check for workspace file (could be either .xcworkspace directory or file)
          if [ ! -d "ios/simple-ios-todo.xcworkspace" ] && [ ! -f "ios/simple-ios-todo.xcworkspace" ]; then
            echo "Warning: Workspace not found, checking for project file instead..."
            if [ ! -f "ios/simple-ios-todo.xcodeproj/project.pbxproj" ]; then
              echo "Error: Neither workspace nor project file found"
              echo "Available files in ios directory:"
              ls -la ios/
              exit 1
            else
              echo "Project file found, continuing with .xcodeproj"
            fi
          fi
          
          echo "--- CocoaPods installation completed successfully ---"

      - name: Build iOS Device (IPA)
        script: |
          echo "--- Building for iOS Device (IPA) ---"
          set -o pipefail
          
          # Clear xcodebuild cache
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          
          # Determine whether to use workspace or project
          if [ -d "ios/simple-ios-todo.xcworkspace" ] || [ -f "ios/simple-ios-todo.xcworkspace" ]; then
            BUILD_TARGET="-workspace ios/simple-ios-todo.xcworkspace"
            echo "Using workspace for build"
          else
            BUILD_TARGET="-project ios/simple-ios-todo.xcodeproj"
            echo "Using project for build"
          fi
          
          # Clean first
          xcodebuild clean \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug

          # Build archive for device
          echo "Starting device archive process..."
          xcodebuild archive \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug \
            -destination 'generic/platform=iOS' \
            -archivePath ios/build/simple-ios-todo.xcarchive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            DEVELOPMENT_TEAM="" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            -quiet \
            | tee xcodebuild-device.log

          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "--- Device archive exit code: $BUILD_EXIT_CODE ---"
          
          # Export archive to .ipa
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            echo "--- Exporting archive to IPA ---"
            
            # Create export options plist for development using printf
            printf '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    <key>method</key>\n    <string>development</string>\n    <key>signingStyle</key>\n    <string>manual</string>\n    <key>stripSwiftSymbols</key>\n    <true/>\n    <key>uploadBitcode</key>\n    <false/>\n    <key>uploadSymbols</key>\n    <false/>\n    <key>compileBitcode</key>\n    <false/>\n</dict>\n</plist>' > ios/ExportOptions.plist
            
            xcodebuild -exportArchive \
              -archivePath ios/build/simple-ios-todo.xcarchive \
              -exportPath ios/build/export \
              -exportOptionsPlist ios/ExportOptions.plist \
              | tee -a xcodebuild-device.log
              
            EXPORT_EXIT_CODE=${PIPESTATUS[0]}
            
            if [ $EXPORT_EXIT_CODE -eq 0 ]; then
              echo "--- Device build and export completed successfully ---"
            else
              echo "--- Export failed, trying alternative method ---"
              # Alternative: create IPA manually from .app
              APP_PATH=$(find ios/build/simple-ios-todo.xcarchive -name "*.app" -type d -print -quit 2>/dev/null)
              if [ -d "$APP_PATH" ]; then
                echo "Creating IPA manually from app bundle..."
                mkdir -p ios/build/export/Payload
                cp -R "$APP_PATH" ios/build/export/Payload/
                cd ios/build/export
                zip -r simple-ios-todo.ipa Payload/
                cd ../../..
                echo "Manual IPA creation completed"
              else
                echo "--- Archive creation failed ---"
                tail -50 xcodebuild-device.log
                # Continue to simulator build even if device build fails
              fi
            fi
          else
            echo "--- Device build failed, continuing to simulator build ---"
            echo "--- Build errors ---"
            grep -i "error:" xcodebuild-device.log | tail -10 || echo "No specific errors found"
            # Don't exit, continue to simulator build
          fi

      - name: Build iOS Simulator
        script: |
          echo "--- Building for iOS Simulator ---"
          set -o pipefail
          
          # Clear xcodebuild cache
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          
          # Determine whether to use workspace or project
          if [ -d "ios/simple-ios-todo.xcworkspace" ] || [ -f "ios/simple-ios-todo.xcworkspace" ]; then
            BUILD_TARGET="-workspace ios/simple-ios-todo.xcworkspace"
            echo "Using workspace for build"
          else
            BUILD_TARGET="-project ios/simple-ios-todo.xcodeproj"
            echo "Using project for build"
          fi
          
          # Clean first
          xcodebuild clean \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug

          # Build for simulator
          echo "Starting simulator build process..."
          xcodebuild \
            $BUILD_TARGET \
            -scheme "simple-ios-todo" \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=17.0' \
            -derivedDataPath ios/build/simulator \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            ONLY_ACTIVE_ARCH=YES \
            -quiet \
            | tee xcodebuild-simulator.log

          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "--- Simulator build exit code: $BUILD_EXIT_CODE ---"
          
          # Check if build succeeded
          if [ $BUILD_EXIT_CODE -eq 0 ] && grep -q "BUILD SUCCEEDED" xcodebuild-simulator.log; then
            echo "--- Simulator build completed successfully ---"
          else
            echo "--- Simulator build failed ---"
            echo "--- Build errors ---"
            grep -i "error:" xcodebuild-simulator.log | tail -10 || echo "No specific errors found"
            echo "--- Build warnings ---"
            grep -i "warning:" xcodebuild-simulator.log | tail -5 || echo "No warnings found"
            echo "--- Last 50 lines of build log ---"
            tail -50 xcodebuild-simulator.log
            exit 1
          fi

      - name: Package Device Artifacts
        script: |
          echo "--- Packaging device build artifacts ---"
          mkdir -p ios_device_build
          
          # Find the .ipa file
          IPA_PATH=$(find ios/build/export -name "*.ipa" -type f -print -quit 2>/dev/null)
          
          if [ -f "$IPA_PATH" ]; then
            echo "Found IPA at: $IPA_PATH"
            cp "$IPA_PATH" ios_device_build/
            
            # Also find and copy the .app bundle from archive
            APP_PATH=$(find ios/build/simple-ios-todo.xcarchive -name "*.app" -type d -print -quit 2>/dev/null)
            if [ -d "$APP_PATH" ]; then
              echo "Found device app bundle at: $APP_PATH"
              cp -R "$APP_PATH" ios_device_build/simple-ios-todo-device.app
            fi
            
            # Create installation instructions using printf
            printf 'iOS Device Build - Installation Instructions\n==========================================\n\nFiles included:\n- simple-ios-todo.ipa (for installation on physical devices)\n- simple-ios-todo-device.app (app bundle from archive)\n\nInstallation Options:\n\n1. Using Xcode (Recommended):\n   - Connect your iOS device to your Mac\n   - Open Xcode and go to Window > Devices and Simulators\n   - Select your device and drag the .ipa file to the "Installed Apps" section\n\n2. Using iOS App Installer (if available):\n   - Transfer the .ipa file to your iOS device\n   - Tap the file to install (requires developer profile)\n\n3. Using 3rd party tools:\n   - Use tools like AltStore, Sideloadly, or similar\n   - Follow their specific installation instructions\n\nNote: This is a development build and may require a developer certificate\nto install on physical devices.\n' > ios_device_build/README.txt
            
            # Create both tar and zip archives for better compatibility
            tar -czf ios-device-build.tar.gz -C ios_device_build .
            cd ios_device_build && zip -r ../ios-device-build.zip . && cd ..
            
            echo "--- Device artifact sizes ---"
            du -sh ios_device_build/*
            du -sh ios-device-build.tar.gz
            du -sh ios-device-build.zip
            
            echo "--- Device packaging completed successfully ---"
          else
            echo "Warning: .ipa file not found, device build may have failed"
            echo "--- Contents of build directory ---"
            find ios/build -name "*.ipa" -o -name "*.app" 2>/dev/null || echo "No device app files found"
            # Create empty device build directory so artifacts don't fail
            touch ios_device_build/.empty
            tar -czf ios-device-build.tar.gz -C ios_device_build .
          fi

      - name: Package Simulator Artifacts
        script: |
          echo "--- Packaging simulator build artifacts ---"
          mkdir -p ios_simulator_build
          
          # Find the .app bundle with comprehensive search
          APP_PATH=$(find ios/build/simulator -name "*.app" -type d -print -quit 2>/dev/null)
          
          if [ -z "$APP_PATH" ]; then
            echo "Searching in alternative locations..."
            APP_PATH=$(find ios/build/simulator/Build/Products -name "*.app" -type d -print -quit 2>/dev/null)
          fi
          
          if [ -d "$APP_PATH" ]; then
            echo "Found simulator app bundle at: $APP_PATH"
            cp -R "$APP_PATH" ios_simulator_build/
            
            # Create installation instructions using printf
            printf 'iOS Simulator Build - Installation Instructions\n=============================================\n\nFiles included:\n- simple-ios-todo.app (simulator app bundle)\n\nInstallation Options:\n\n1. Using Xcode Simulator:\n   - Open Xcode and launch iOS Simulator\n   - Drag the .app file onto the simulator\n   - The app will be installed and ready to run\n\n2. Using Command Line:\n   - xcrun simctl install booted /path/to/simple-ios-todo.app\n   - xcrun simctl launch booted com.yourcompany.simple-ios-todo\n\n3. Using Simulator Menu:\n   - In Simulator, go to Device > Install App\n   - Select the .app bundle\n\nNote: This build only works in iOS Simulator, not on physical devices.\n' > ios_simulator_build/README.txt
            
            # Create both tar and zip archives for better compatibility
            tar -czf ios-simulator-build.tar.gz -C ios_simulator_build .
            cd ios_simulator_build && zip -r ../ios-simulator-build.zip . && cd ..
            
            echo "--- Simulator artifact sizes ---"
            du -sh ios_simulator_build/*.app
            du -sh ios-simulator-build.tar.gz
            du -sh ios-simulator-build.zip
            
            echo "--- Simulator packaging completed successfully ---"
          else
            echo "Error: Simulator .app bundle not found"
            echo "--- Contents of simulator build directory ---"
            find ios/build/simulator -type f -name "*.app" -o -name "*.ipa" -o -name "*simple-ios-todo*" 2>/dev/null || echo "No simulator app files found"
            echo "--- All directories in simulator build ---"
            find ios/build/simulator -type d -name "*simple*" -o -name "*ios*" -o -name "*Debug*" 2>/dev/null || echo "No relevant directories found"
            exit 1
          fi

      - name: Verify Build Outputs
        script: |
          echo "--- Build verification ---"
          echo "=== Device Build ==="
          if [ -f "ios-device-build.tar.gz" ]; then
            echo "✓ Device tar archive found"
            echo "Device archive contents:"
            tar -ztvf ios-device-build.tar.gz | head -10
          else
            echo "✗ Device tar archive not found"
          fi
          
          if [ -f "ios-device-build.zip" ]; then
            echo "✓ Device zip archive found"
          else
            echo "✗ Device zip archive not found"
          fi
          
          echo ""
          echo "=== Simulator Build ==="
          if [ -f "ios-simulator-build.tar.gz" ]; then
            echo "✓ Simulator tar archive found"
            echo "Simulator archive contents:"
            tar -ztvf ios-simulator-build.tar.gz | head -10
            
            # Verify .app is in archive
            if tar -ztvf ios-simulator-build.tar.gz | grep -q "\.app/"; then
              echo "✓ App bundle found in simulator archive"
            else
              echo "✗ App bundle not found in simulator archive"
              exit 1
            fi
          else
            echo "✗ Simulator tar archive not found"
            exit 1
          fi
          
          if [ -f "ios-simulator-build.zip" ]; then
            echo "✓ Simulator zip archive found"
          else
            echo "✗ Simulator zip archive not found"
          fi
          
          echo ""
          echo "=== Summary ==="
          echo "Available downloads:"
          ls -la *.tar.gz *.zip 2>/dev/null || echo "No archives found"
          
          echo "--- Build verification completed ---"

    artifacts:
      # Device build artifacts (IPA for physical devices)
      - ios_device_build/*.ipa
      - ios_device_build/*.app
      - ios-device-build.tar.gz
      - ios-device-build.zip
      
      # Simulator build artifacts
      - ios_simulator_build/*.app
      - ios-simulator-build.tar.gz
      - ios-simulator-build.zip
      
      # Build logs and metadata
      - ios/build/**/*.log
      - xcodebuild-device.log
      - xcodebuild-simulator.log
      - ios/Podfile.lock
      
      # Installation instructions
      - ios_device_build/README.txt
      - ios_simulator_build/README.txt

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          failure: true