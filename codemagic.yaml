workflows:
  expo-ios-release:
    name: Expo iOS Release Build
    instance_type: mac_mini_m2
    working_directory: .

    environment:
      vars:
        RCT_NO_LAUNCH_PACKAGER: "true"
        RCT_METRO_PORT: "8081"
        CI: "1"
        BUILD_NUMBER: "1"
        # Add your app-specific bundle ID
        BUNDLE_ID: "com.anonymous.simpleiostodo"
      node: 20
      java: 17
      # REQUIRED: Add code signing credentials
      # ios_signing:
      #   distribution_type: ad_hoc  # or 'ad_hoc' for testing
      #   bundle_identifier: com.anonymous.simpleiostodo

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ios/Pods
        - ios/Podfile.lock
        - ~/Library/Caches/CocoaPods  # Add CocoaPods cache

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      # ────────────────────────────────────────────────────────────────
      # 1) Environment Setup
      # ────────────────────────────────────────────────────────────────
      - name: Environment Setup
        script: |
          echo "--- System Information ---"
          sw_vers
          echo "--- Node $(node -v) ---"
          echo "--- Yarn $(yarn -v) ---"
          echo "--- Xcode $(xcodebuild -version | head -n 1) ---"
          echo "--- Ruby $(ruby -v) ---"
          echo "--- CocoaPods $(pod --version) ---"

      # ────────────────────────────────────────────────────────────────
      # 2) Install Dependencies First (before prebuild)
      # ────────────────────────────────────────────────────────────────
      - name: Install JS Dependencies
        script: |
          echo "--- Installing JS dependencies ---"
          yarn install --frozen-lockfile --network-timeout 600000

      # ────────────────────────────────────────────────────────────────
      # 3) Expo Prebuild (generate native projects)
      # ────────────────────────────────────────────────────────────────
      - name: Expo Prebuild
        script: |
          echo "--- Running Expo prebuild ---"
          npx expo prebuild --clean --platform ios
          echo "--- Prebuild completed, ios/ contents: ---"
          ls -la ios/

      # ────────────────────────────────────────────────────────────────
      # 4) Clean and Install CocoaPods
      # ────────────────────────────────────────────────────────────────
      - name: Install CocoaPods Dependencies
        script: |
          echo "--- Installing CocoaPods dependencies ---"
          cd ios
          
          # Clear caches to avoid checksum issues
          rm -rf ~/Library/Caches/CocoaPods
          pod cache clean --all || true
          
          # Fresh install
          pod install --repo-update --clean-install
          
          # Verify workspace creation
          if [ -f "*.xcworkspace" ]; then
            echo "✅ Workspace created successfully"
            WORKSPACE_FILE=$(ls *.xcworkspace | head -n 1)
            echo "Workspace: $WORKSPACE_FILE"
          else
            echo "❌ No workspace found"
            exit 1
          fi
          cd ..

      # ────────────────────────────────────────────────────────────────
      # 5) Build and Archive
      # ────────────────────────────────────────────────────────────────
      - name: Build and Archive
        script: |
          echo "--- Building and archiving iOS app ---"
          cd ios
          
          # Find the correct workspace/project file
          if ls *.xcworkspace 1> /dev/null 2>&1; then
            WORKSPACE=$(ls *.xcworkspace | head -n 1)
            BUILD_TARGET="-workspace $WORKSPACE"
            echo "Using workspace: $WORKSPACE"
          else
            PROJECT=$(ls *.xcodeproj | head -n 1)
            BUILD_TARGET="-project $PROJECT"
            echo "Using project: $PROJECT"
          fi
          
          # Get scheme name (usually matches app name)
          SCHEME_NAME=$(xcodebuild -list $BUILD_TARGET 2>/dev/null | sed -n '/Schemes:/,/^$/p' | grep -v "Schemes:" | head -n 1 | xargs)
          echo "Using scheme: $SCHEME_NAME"
          
          # Archive
          xcodebuild \
            $BUILD_TARGET \
            -scheme "$SCHEME_NAME" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/App.xcarchive \
            archive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM=$CM_APPLE_TEAM_ID
          
          # Export IPA
          xcodebuild \
            -exportArchive \
            -archivePath build/App.xcarchive \
            -exportPath build \
            -exportOptionsPlist exportOptions.plist
          
          echo "--- Build completed ---"
          ls -la build/
          cd ..

    artifacts:
      - ios/build/*.ipa
      - ios/build/*.dSYM.zip
      - ios/build/ExportOptions.plist

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          failure: true