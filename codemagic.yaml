workflows:
  expo-ios-development:
    name: Expo iOS Development Build
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      vars:
        XCODE_WORKSPACE: "ios/simple-ios-todo.xcworkspace"
        XCODE_SCHEME: "simple-ios-todo"
        BUNDLE_ID: "com.anonymous.simpleiostodo"
        BUILD_NUMBER: "1"
      node: 20
      xcode: 15.1
      cocoapods: default
    cli:
      version: latest   # <-- Correct indentation: cli expects a dictionary, so version must be a key here

build:
  ios:
    image: macos-latest
    shell: bash
    env:
      NODE_OPTIONS: --max_old_space_size=4096

    prebuild:
      - echo "--- Running expo prebuild for iOS ---"
      - CI=1 npx expo prebuild --platform ios

    postinstall:
      - echo "--- Cleaning old CocoaPods ---"
      - cd ios
      - rm -rf Pods Podfile.lock
      - pod deintegrate || true
      - echo "--- Installing CocoaPods with arch workaround ---"
      - arch -x86_64 pod install --repo-update

    cache:
      cache_paths:
        - ~/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- Node version ---"
          node -v
          echo "--- Yarn version ---"
          yarn -v
          echo "--- npm version ---"
          npm -v
          echo "--- Xcode version ---"
          xcodebuild -version
          echo "--- CocoaPods version ---"
          pod --version

      - name: Setup Xcode and CocoaPods
        script: |
          echo "--- Selecting full Xcode developer directory ---"
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          echo "--- Verifying xcode-select path ---"
          xcode-select -p

          echo "--- Installing/Updating CocoaPods gem ---"
          sudo gem install cocoapods

          # If you want to use Homebrew instead, comment above and uncomment below:
          # echo "--- Uninstalling CocoaPods gem (if present) ---"
          # sudo gem uninstall cocoapods || true
          # echo "--- Installing CocoaPods via Homebrew ---"
          # brew install cocoapods
          # echo "--- Linking CocoaPods binaries (if needed) ---"
          # brew link --overwrite cocoapods

          echo "--- Verifying CocoaPods version ---"
          pod --version

      - name: Install Dependencies
        script: |
          echo "--- Cleaning npm cache ---"
          npm cache clean --force
          echo "--- Installing Yarn dependencies ---"
          yarn install --network-timeout 600000 --ignore-engines

          echo "--- Ensuring expo is installed ---"
          yarn add expo
          # Fixed indentation here, this was incorrectly treated as a script line before
          arch -x86_64 pod install --repo-update

      # - name: Install Pods
      #   script: |
      #     echo "--- Removing ios/Pods and node_modules folders ---"
      #     rm -rf ios/Pods node_modules
      #     echo "--- Installing Pods ---"
      #     cd ios
      #     pod install --repo-update --allow-root
      #     cd ..

      - name: Expo Prebuild
        script: |
          echo "--- Generating iOS Native Code ---"
          CI=1 npx expo prebuild --platform ios
          echo "--- Prebuild contents verification ---"
          ls -la ios/
          if [ -d "ios" ]; then
            echo "✅ iOS folder exists"
            ls -la ios/
          else
            echo "❌ iOS folder does not exist"
          fi

      - name: Setup EAS CLI
        script: |
          echo "--- Installing EAS CLI ---"
          npm install -g eas-cli@latest --no-audit --fund=false --omit=optional
          echo "--- EAS CLI version ---"
          npx eas-cli --version

      - name: Install CocoaPods
        script: |
          echo "--- Installing Pods ---"
          cd ios
          pod install --repo-update --verbose
          cd ..
          echo "--- Pods directory contents ---"
          ls -la ios/Pods/

    #   - name: Build Development Version
    #     script: |
    #       echo "--- Building Development Version ---"
    #       set -o pipefail && xcodebuild \
    #         -workspace "$XCODE_WORKSPACE" \
    #         -scheme "$XCODE_SCHEME" \
    #         -configuration Debug \
    #         -destination 'generic/platform=iOS' \
    #         -quiet \
    #         CODE_SIGNING_ALLOWED=NO \
    #         COMPILER_INDEX_STORE_ENABLE=NO \
    #         | xcpretty

    #       # Alternative approach if the above fails
    #       echo "--- Fallback: Detailed build logs ---"
    #       xcodebuild \
    #         -workspace "$XCODE_WORKSPACE" \
    #         -scheme "$XCODE_SCHEME" \
    #         -configuration Debug \
    #         -destination 'generic/platform=iOS' \
    #         CODE_SIGNING_ALLOWED=NO \
    #         | tee xcodebuild.log

    #       # Save the full build logs as artifact
    #       mkdir -p build_logs
    #       mv xcodebuild.log build_logs/

    # artifacts:
    #   - build/ios/ipa/*.ipa
    #   - /tmp/xcodebuild_logs/*.log
    #   - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #   - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    #   - ios/build/**/*.log

    # publishing:
    #   email:
    #     recipients:
    #       - webdev.faizanali@gmail.com
    #   slack:
    #     channel: "#build-notifications"
