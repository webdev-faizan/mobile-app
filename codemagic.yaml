workflows:
  expo-development-build:
    name: Expo Development Build (Android & iOS)
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      vars:
        BUILD_NUMBER: "1"
        XCODE_WORKSPACE: "ios/simple-ios-todo.xcworkspace"
        XCODE_SCHEME: "simple-ios-todo"
        BUNDLE_ID: "com.anonymous.simpleiostodo"
        # Add your EAS project details
        EXPO_TOKEN: $EXPO_TOKEN # Add this to your Codemagic environment variables
      node: 20
      java: 17
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ~/Library/Caches/CocoaPods
        - ios/Pods

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- Node version ---"
          node -v
          echo "--- Yarn version ---"
          yarn -v
          echo "--- npm version ---"
          npm -v
          echo "--- Java version ---"
          java -version
          echo "--- Xcode version ---"
          xcodebuild -version
          echo "--- CocoaPods version ---"
          pod --version
          echo "--- Android SDK location ---"
          echo $ANDROID_SDK_ROOT

      - name: Install Dependencies
        script: |
          npm cache clean --force
          yarn install --network-timeout 600000 --ignore-engines

      - name: Setup EAS CLI
        script: |
          npm install -g eas-cli@latest @expo/cli@latest --no-audit --fund=false --omit=optional
          npx eas-cli --version
          npx expo --version

      - name: Login to Expo
        script: |
          if [ -n "$EXPO_TOKEN" ]; then
            echo "Logging into Expo with token..."
            npx eas login --non-interactive
          else
            echo "Warning: EXPO_TOKEN not set. Manual builds will be used."
          fi

      - name: Build Android with EAS
        script: |
          echo "--- Building Android APK with EAS ---"
          if [ -n "$EXPO_TOKEN" ]; then
            npx eas build --platform android --profile development --non-interactive --wait
            # Download the built APK
            npx eas build:download --platform android --profile development
          else
            echo "Building Android manually..."
            npx expo prebuild --platform android --non-interactive
            cd android
            ./gradlew :app:assembleDebug --no-daemon --stacktrace
            cd ..
          fi

      - name: Build iOS with EAS
        script: |
          echo "--- Building iOS Simulator with EAS ---"
          if [ -n "$EXPO_TOKEN" ]; then
            npx eas build --platform ios --profile development --non-interactive --wait
            # Download the built iOS simulator build
            npx eas build:download --platform ios --profile development
          else
            echo "Building iOS manually for simulator..."
            npx expo prebuild --platform ios --non-interactive
            cd ios
            pod install --repo-update --verbose
            cd ..
            
            # Build for iOS Simulator
            xcodebuild \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Debug \
              -destination 'generic/platform=iOS Simulator' \
              -derivedDataPath ios/build \
              CODE_SIGNING_ALLOWED=NO \
              COMPILER_INDEX_STORE_ENABLE=NO
            
            # Create simulator app bundle
            mkdir -p ios_simulator_build
            if [ -d "ios/build/Build/Products/Debug-iphonesimulator" ]; then
              cp -R ios/build/Build/Products/Debug-iphonesimulator/*.app ios_simulator_build/ || echo "No .app found"
            fi
          fi

      - name: Manual Fallback Build (Android)
        script: |
          if [ ! -f "*.apk" ] && [ -z "$EXPO_TOKEN" ]; then
            echo "--- Manual Android Build Fallback ---"
            if [ ! -d "android" ]; then
              npx expo prebuild --platform android --non-interactive
            fi
            cd android
            ./gradlew :app:assembleDebug --no-daemon --stacktrace
            cd ..
          fi

      - name: Manual Fallback Build (iOS)
        script: |
          if [ ! -f "*.tar.gz" ] && [ -z "$EXPO_TOKEN" ]; then
            echo "--- Manual iOS Build Fallback ---"
            if [ ! -d "ios" ]; then
              npx expo prebuild --platform ios --non-interactive
            fi
            cd ios
            pod install --repo-update --verbose
            cd ..
            
            # Build iOS for simulator
            xcodebuild \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Debug \
              -destination 'generic/platform=iOS Simulator' \
              -derivedDataPath ios/build \
              CODE_SIGNING_ALLOWED=NO \
              | tee ios_build.log
            
            # Package simulator build
            mkdir -p ios_simulator_build
            if [ -d "ios/build/Build/Products/Debug-iphonesimulator" ]; then
              cp -R ios/build/Build/Products/Debug-iphonesimulator/*.app ios_simulator_build/
              cd ios_simulator_build
              tar -czf ../ios-simulator-build.tar.gz *.app
              cd ..
            fi
          fi

      - name: List Build Artifacts
        script: |
          echo "--- Listing all potential artifacts ---"
          find . -name "*.apk" -type f
          find . -name "*.ipa" -type f
          find . -name "*.app" -type d
          find . -name "*.tar.gz" -type f
          ls -la || true

    artifacts:
      # EAS Build artifacts
      - "*.apk"
      - "*.ipa"
      - "*.tar.gz"
      # Manual build artifacts
      - android/app/build/outputs/**/*.apk
      - android/app/build/**/*.log
      - ios_simulator_build/*.app
      - ios-simulator-build.tar.gz
      # Build logs
      - ios_build.log
      - ios/build/**/*.log
      - build_logs/**

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          failure: true
      slack:
        channel: "#build-notifications"
        notify_on_build_start: true
        notify:
          success: true
          failure: true