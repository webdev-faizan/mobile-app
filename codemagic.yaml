workflows:
  react-native-ios:
    name: React Native iOS
    max_build_duration: 120
    instance_type: mac_mini_m2
    integrations:
      app_store_connect: Codemagic API Key
    environment:
      ios_signing:
        distribution_type: development
        bundle_identifier: com.superiordatascience.salesagent
      vars:
        XCODE_WORKSPACE: "salesagent.xcworkspace"
        XCODE_SCHEME: "salesagent"
        APP_ID: QU4N3K3A86
        # Add React Native and Expo environment variables
        EXPO_SDK_VERSION: "49.0.0" # Update to match your Expo SDK version
      node: v19.7.0
      xcode: latest
      cocoapods: 1.12.1
    scripts:
      - name: Install npm dependencies
        script: |
          # Clear npm cache and install dependencies
          npm cache clean --force
          yarn install

          # Install Expo CLI if needed
          yarn add -g @expo/cli

      - name: Install CocoaPods dependencies
        script: |
          # Debug: Print environment information
          echo "Current directory: $(pwd)"
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "CocoaPods version: $(pod --version)"

          # Ensure we're in the project root
          cd $CM_BUILD_DIR

          # Debug: Check if package.json exists
          if [ -f "package.json" ]; then
            echo "package.json exists"
          else
            echo "Error: package.json not found"
            exit 1
          fi

          # Debug: Check if ios directory exists
          if [ ! -d "ios" ]; then
            echo "Error: ios directory not found"
            exit 1
          fi

          # Navigate to iOS directory
          cd ios

          # Clean previous installations more thoroughly
          echo "Cleaning previous CocoaPods installation..."
          rm -rf Pods
          rm -rf build
          rm -rf *.xcworkspace
          rm -rf Podfile.lock
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

          # Clear CocoaPods cache
          pod cache clean --all

          # Debug: Check if Podfile exists and print its contents
          if [ -f "Podfile" ]; then
            echo "Podfile exists, contents:"
            cat Podfile
          else
            echo "Error: Podfile not found"
            exit 1
          fi

          # Update CocoaPods repo
          echo "Updating CocoaPods repository..."
          pod repo update

          # Install pods with verbose output and error handling
          echo "Installing CocoaPods dependencies..."
          pod install --verbose --clean-install

      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles --warn-only

      - name: Increment build number
        script: |
          cd $CM_BUILD_DIR/ios
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-testflight-build-number "$APP_ID")
          if [ -z "$LATEST_BUILD_NUMBER" ]; then
            echo "No previous build found, using build number 1"
            LATEST_BUILD_NUMBER=0
          fi
          NEW_BUILD_NUMBER=$(($LATEST_BUILD_NUMBER + 1))
          echo "Setting build number to: $NEW_BUILD_NUMBER"
          agvtool new-version -all $NEW_BUILD_NUMBER

      - name: Build ipa for distribution
        script: |
          xcode-project build-ipa \
            --workspace "$CM_BUILD_DIR/ios/$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME" \
            --config "Release"

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      email:
        recipients:
          - jobin@superiordatascience.com
        notify:
          success: true
          failure: false
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal Testers # Update with your actual beta group names
        submit_to_app_store: false

  #
