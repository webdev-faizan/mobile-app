workflows:
  expo-multi-platform-build:
    name: Expo Multi-Platform Build
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      vars:
        # Will be set dynamically after prebuild
        BUNDLE_ID: "com.anonymous.simpleiostodo"
        BUILD_NUMBER: "1"
        
        # Android specific vars
        ANDROID_PROJECT_DIR: "android"
        ANDROID_BUILD_TYPE: "Debug"
      node: 20
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - ~/Library/Caches/CocoaPods
        - ios/Pods
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - android/.gradle
        - $HOME/.gradle/caches

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- Node version ---"
          node -v
          echo "--- Yarn version ---"
          yarn -v
          echo "--- npm version ---"
          npm -v
          echo "--- Xcode version ---"
          xcodebuild -version
          echo "--- CocoaPods version ---"
          pod --version
          echo "--- Java version ---"
          java -version

      - name: Install Dependencies
        script: |
          echo "--- Cleaning npm cache ---"
          npm cache clean --force
          echo "--- Installing Yarn dependencies ---"
          yarn install --network-timeout 600000 --ignore-engines

      - name: Setup EAS CLI
        script: |
          echo "--- Installing EAS CLI ---"
          npm install -g eas-cli@latest --no-audit --fund=false --omit=optional
          echo "--- EAS CLI version ---"
          npx eas-cli --version

      - name: Expo Prebuild
        script: |
          echo "--- Generating Native Code ---"
          npx expo prebuild --platform all --non-interactive
          echo "--- Prebuild contents verification ---"
          ls -la ios/
          ls -la android/
          
          echo "--- Finding iOS workspace and scheme ---"
          # Find the actual workspace file
          WORKSPACE_FILE=$(find ios -name "*.xcworkspace" -type d | head -1)
          if [ -z "$WORKSPACE_FILE" ]; then
            echo "Error: No .xcworkspace file found"
            exit 1
          fi
          
          # Extract workspace name
          WORKSPACE_NAME=$(basename "$WORKSPACE_FILE")
          echo "Found workspace: $WORKSPACE_NAME"
          
          # Find the scheme name from the xcworkspace
          SCHEME_NAME=$(ls ios/*.xcodeproj 2>/dev/null | head -1 | xargs basename -s .xcodeproj || echo "simpleiostodo")
          echo "Using scheme: $SCHEME_NAME"
          
          # Export for use in subsequent steps
          echo "export XCODE_WORKSPACE=\"$WORKSPACE_FILE\"" >> $CM_ENV
          echo "export XCODE_SCHEME=\"$SCHEME_NAME\"" >> $CM_ENV
          
          echo "Workspace path: $WORKSPACE_FILE"
          echo "Scheme name: $SCHEME_NAME"

      - name: Install CocoaPods (iOS)
        script: |
          echo "--- Installing Pods ---"
          cd ios
          pod install --repo-update --verbose
          cd ..
          echo "--- Pods directory contents ---"
          ls -la ios/Pods/
          
          echo "--- Verifying workspace after pod install ---"
          echo "Using workspace: $XCODE_WORKSPACE"
          echo "Using scheme: $XCODE_SCHEME"

      - name: Build iOS Debug Version
        script: |
          echo "--- Building iOS Debug Version ---"
          echo "Workspace: $XCODE_WORKSPACE"
          echo "Scheme: $XCODE_SCHEME"
          
          # Verify the workspace exists
          if [ ! -d "$XCODE_WORKSPACE" ]; then
            echo "Error: Workspace $XCODE_WORKSPACE does not exist"
            echo "Available files in ios directory:"
            ls -la ios/
            exit 1
          fi
          
          # Create build logs directory
          mkdir -p build_logs/ios
          
          # Build with proper error handling
          set -o pipefail && xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Debug \
            -destination 'generic/platform=iOS' \
            -quiet \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            | tee build_logs/ios/xcodebuild.log | xcpretty
          
          # Save result bundle if it exists
          if ls /var/folders/*/T/ResultBundle_* 1> /dev/null 2>&1; then
            mv /var/folders/*/T/ResultBundle_* build_logs/ios/ || true
          fi

      - name: Build Android Debug Version
        script: |
          echo "--- Building Android Debug Version ---"
          cd android
          ./gradlew assembleDebug --stacktrace
          cd ..
          echo "--- APK location ---"
          find android -name "*.apk" -exec ls -la {} \;

    artifacts:
      - build_logs/**/*
      - ios/build/**/*.log
      - android/app/build/outputs/**/*.apk
      - ios
      - android

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
      slack:
        channel: "#build-notifications"