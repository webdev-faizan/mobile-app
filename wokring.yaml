workflows:
  expo-development-build:
    name: Expo Development Build (Android & iOS)
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      vars:
        BUILD_NUMBER: "1"
        XCODE_WORKSPACE: "simple-ios-todo.xcworkspace"
        XCODE_SCHEME: "simple-ios-todo"
        BUNDLE_ID: "com.anonymous.simpleiostodo"
      node: 20
      java: 17
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ~/Library/Caches/CocoaPods/Pods
        - ios/Pods
        - ~/.cocoapods/repos

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- Node version ---"
          node -v
          echo "--- Yarn version ---"
          yarn -v
          echo "--- npm version ---"
          npm -v
          echo "--- Java version ---"
          java -version
          echo "--- Xcode version ---"
          xcodebuild -version
          echo "--- CocoaPods version ---"
          pod --version
          echo "--- Android SDK location ---"
          echo $ANDROID_SDK_ROOT

      - name: Clean CocoaPods Cache
        script: |
          echo "--- Cleaning CocoaPods cache ---"
          pod cache clean --all
          rm -rf ~/Library/Caches/CocoaPods
          echo "CocoaPods cache cleaned"

      - name: Update CocoaPods
        script: |
          echo "--- Updating CocoaPods ---"
          gem update cocoapods --no-document
          pod --version

      - name: Install Dependencies
        script: |
          echo "--- Installing Node dependencies ---"
          npm cache clean --force
          yarn install --network-timeout 600000 --ignore-engines

      - name: Setup Expo CLI
        script: |
          echo "--- Setting up Expo CLI ---"
          npm install -g @expo/cli@latest --no-audit --fund=false --omit=optional
          npx expo --version

      - name: Prebuild Android
        script: |
          echo "--- Prebuilding Android ---"
          npx expo prebuild --platform android --non-interactive

      - name: Bundle JS for Android
        script: |
          echo "--- Bundling JavaScript for Android ---"
          mkdir -p android/app/src/main/assets
          mkdir -p android/app/src/main/res
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res

      - name: Build Android (Local)
        script: |
          echo "--- Building Android APK locally ---"
          cd android
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew :app:assembleDebug --no-daemon --stacktrace
          cd ..

      - name: Prebuild iOS
        script: |
          echo "--- Prebuilding iOS ---"
          npx expo prebuild --platform ios --non-interactive

      - name: Install iOS Dependencies with Retry
        script: |
          echo "--- Installing iOS dependencies with retry logic ---"
          cd ios
          
          # Function to attempt pod install
          install_pods() {
            echo "Attempting pod install..."
            pod install --repo-update --verbose
          }
          
          # Retry logic for pod install
          MAX_ATTEMPTS=3
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Pod install attempt $ATTEMPT of $MAX_ATTEMPTS"
            
            if install_pods; then
              echo "Pod install successful on attempt $ATTEMPT"
              break
            else
              echo "Pod install failed on attempt $ATTEMPT"
              
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "Cleaning up for retry..."
                # Clean up failed installation
                rm -rf Pods/
                rm -f Podfile.lock
                pod cache clean --all
                
                # Wait before retry
                echo "Waiting 10 seconds before retry..."
                sleep 10
              else
                echo "All pod install attempts failed"
                exit 1
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          cd ..

      - name: Verify iOS Pods Installation
        script: |
          echo "--- Verifying iOS Pods installation ---"
          cd ios
          if [ -d "Pods" ]; then
            echo "Pods directory exists"
            ls -la Pods/ | head -10
          else
            echo "ERROR: Pods directory not found"
            exit 1
          fi
          
          if [ -f "Podfile.lock" ]; then
            echo "Podfile.lock exists"
            echo "First 20 lines of Podfile.lock:"
            head -20 Podfile.lock
          else
            echo "ERROR: Podfile.lock not found"
            exit 1
          fi
          cd ..

      - name: Build iOS (Local)
        script: |
          echo "--- Building iOS Simulator locally ---"
          
          # Clean previous builds
          rm -rf ios/build
          rm -rf ios_simulator_build
          
          # Build for iOS Simulator
          xcodebuild \
            -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Debug \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath ios/build \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            clean build

          # Package the build
          mkdir -p ios_simulator_build
          if [ -d "ios/build/Build/Products/Debug-iphonesimulator" ]; then
            echo "Copying iOS Simulator build..."
            cp -R ios/build/Build/Products/Debug-iphonesimulator/*.app ios_simulator_build/ || echo "No .app found"
            
            if [ -d "ios_simulator_build" ] && [ "$(ls -A ios_simulator_build)" ]; then
              cd ios_simulator_build
              tar -czf ../ios-simulator-build.tar.gz *.app
              cd ..
              echo "iOS Simulator build packaged successfully"
            else
              echo "WARNING: No iOS Simulator build artifacts found"
            fi
          else
            echo "WARNING: iOS Simulator build directory not found"
          fi

      - name: Verify Build Artifacts
        script: |
          echo "--- Verifying build artifacts ---"
          echo "=== Android APK files ==="
          find . -name "*.apk" -type f -exec ls -lh {} \;
          
          echo "=== iOS App bundles ==="
          find . -name "*.app" -type d -exec ls -lhd {} \;
          
          echo "=== Compressed archives ==="
          find . -name "*.tar.gz" -type f -exec ls -lh {} \;
          
          echo "=== Android build directory ==="
          ls -la android/app/build/outputs/apk/debug/ 2>/dev/null || echo "No Android debug APK directory"
          
          echo "=== iOS simulator build directory ==="
          ls -la ios_simulator_build/ 2>/dev/null || echo "No iOS simulator build directory"
          
          echo "=== Build summary ==="
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ Android APK build successful"
          else
            echo "❌ Android APK build failed or not found"
          fi
          
          if [ -f "ios-simulator-build.tar.gz" ]; then
            echo "✅ iOS Simulator build successful"
          else
            echo "❌ iOS Simulator build failed or not found"
          fi

      - name: Debug Information (On Failure)
        script: |
          echo "--- Debug Information ---"
          echo "=== System Information ==="
          uname -a
          
          echo "=== Disk Space ==="
          df -h
          
          echo "=== CocoaPods Configuration ==="
          pod env
          
          echo "=== Recent CocoaPods Logs ==="
          if [ -f ~/Library/Logs/CocoaPods/Pod\ Install.log ]; then
            tail -50 ~/Library/Logs/CocoaPods/Pod\ Install.log
          fi
          
          echo "=== iOS Pods Directory ==="
          if [ -d "ios/Pods" ]; then
            find ios/Pods -name "*.log" -exec tail -20 {} \;
          fi
          
          echo "=== Xcode Build Logs ==="
          if [ -d "ios/build" ]; then
            find ios/build -name "*.log" -exec tail -20 {} \;
          fi
        when: failure

    artifacts:
      - android/app/build/outputs/**/*.apk
      - android/app/build/**/*.log
      - ios_simulator_build/*.app
      - ios-simulator-build.tar.gz
      - ios/build/**/*.log
      - build_logs/**
      - ~/Library/Logs/CocoaPods/**

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          failure: true
      slack:
        channel: "#build-notifications"
        notify_on_build_start: true
        notify:
          success: true
          failure: true