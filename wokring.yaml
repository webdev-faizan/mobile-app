workflows:
  expo-development-build:
    name: Expo Development Build (iOS only)
    instance_type: mac_mini_m2
    working_directory: .
    environment:
      node: 20
      java: 17
      xcode: 15.0
      cocoapods: default

    cache:
      cache_paths:
        - node_modules
        - .yarn/cache
        - .yarn/install-state.gz
        - .yarn/unplugged
        - ~/Library/Caches/CocoaPods
        - ios/Pods

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "master*"
          include: true
          source: true

    scripts:
      - name: Setup Environment
        script: |
          echo "--- System Info ---"
          echo "Node version: $(node -v)"
          echo "Yarn version: $(yarn -v)"
          echo "npm version: $(npm -v)"
          echo "Java version: $(java -version 2>&1 | head -n 1)"
          echo "Xcode version: $(xcodebuild -version | head -n 1)"
          echo "CocoaPods version: $(pod --version)"
          echo "System architecture: $(uname -m)"
          echo "Available memory: $(sysctl -n hw.memsize | awk '{print $0/1073741824\" GB\"}')"
          
          export NODE_OPTIONS=--max_old_space_size=4096
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          export CI=1

      - name: Clean Workspace
        script: |
          echo "--- Cleaning previous builds ---"
          rm -rf ios/build ios_simulator_build ios/
          rm -f ios-simulator-build.tar.gz
          find . -name "*.log" -delete
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

      - name: Install Dependencies
        script: |
          echo "--- Installing dependencies ---"
          npm cache clean --force
          yarn install --network-timeout 600000 --ignore-engines --frozen-lockfile
          yarn check --verify-tree || (echo "Dependency tree verification failed" && exit 1)

      - name: Setup Expo CLI
        script: |
          echo "--- Setting up Expo CLI ---"
          npm install -g @expo/cli@latest --no-audit --fund=false --omit=optional
          npx expo --version

      - name: Prebuild iOS Project
        script: |
          echo "--- Running expo prebuild ---"
          npx expo prebuild --platform ios

          echo "--- Verifying prebuild files ---"
          [ -f "ios/simple-ios-todo.xcodeproj/project.pbxproj" ] || (echo "Xcode project not found" && exit 1)
          [ -f "ios/Podfile" ] || (echo "Podfile not found" && exit 1)
          echo "--- Prebuild verification completed successfully ---"

      - name: Install CocoaPods
        script: |
          echo "--- Installing pods ---"
          cd ios
          pod install --repo-update --verbose
          cd ..
          [ -d "ios/Pods" ] || (echo "Pods directory not created" && exit 1)
          [ -d "ios/simple-ios-todo.xcworkspace" ] || (echo "Workspace not found after pod install" && exit 1)
          echo "--- CocoaPods installation completed successfully ---"

      - name: Build iOS Simulator
        script: |
          echo "--- Building for iOS Simulator ---"
          set -o pipefail
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

          xcodebuild clean \
            -workspace "ios/simple-ios-todo.xcworkspace" \
            -scheme "simple-ios-todo" \
            -configuration Debug

          xcodebuild \
            -workspace "ios/simple-ios-todo.xcworkspace" \
            -scheme "simple-ios-todo" \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=17.0' \
            -derivedDataPath ios/build \
            CODE_SIGNING_ALLOWED=NO \
            COMPILER_INDEX_STORE_ENABLE=NO \
            | tee xcodebuild.log

          BUILD_EXIT_CODE=${PIPESTATUS[0]}
          echo "--- Xcodebuild exit code: $BUILD_EXIT_CODE ---"

          if [ $BUILD_EXIT_CODE -eq 0 ] && grep -q "BUILD SUCCEEDED" xcodebuild.log; then
            echo "--- Build completed successfully ---"
          else
            echo "--- Build failed ---"
            tail -50 xcodebuild.log
            exit 1
          fi

      - name: Package Artifacts
        script: |
          echo "--- Packaging build artifacts ---"
          mkdir -p ios_simulator_build

          APP_PATH=$(find ios/build/Build/Products/Debug-iphonesimulator -name "*.app" -type d -print -quit)

          if [ -d "$APP_PATH" ]; then
            echo "Found app bundle at: $APP_PATH"
            cp -R "$APP_PATH" ios_simulator_build/

            tar -czf ios-simulator-build.tar.gz -C ios_simulator_build .

            echo "--- Artifact sizes ---"
            du -sh ios_simulator_build/*.app
            du -sh ios-simulator-build.tar.gz
            echo "--- Packaging completed successfully ---"
          else
            echo "Error: .app bundle not found"
            find ios/build -name "*.app" -type d -print
            exit 1
          fi

      - name: Verify Build Output
        script: |
          echo "--- Build verification ---"
          [ -f "ios-simulator-build.tar.gz" ] || (echo "Tar archive not found" && exit 1)
          echo "--- Archive contents ---"
          tar -ztvf ios-simulator-build.tar.gz | head -20
          tar -ztvf ios-simulator-build.tar.gz | grep -q "\.app/" || (echo "App not in archive" && exit 1)
          echo "--- Build verified successfully ---"

    artifacts:
      - ios_simulator_build/*.app
      - ios-simulator-build.tar.gz
      - ios/build/**/*.log
      - xcodebuild.log

    publishing:
      email:
        recipients:
          - webdev.faizanali@gmail.com
        notify:
          success: true
          failure: true
